{"version":3,"sources":["actions/changeTime.js","buttons.js","spaned.js","blackbox.js","App.js","serviceWorker.js","reducer/changetime.js","reducer/index.js","store/store.js","index.js"],"names":["changeTime","target","type","payload","connect","_ref","props","clickhandler","e","value","react_default","a","createElement","className","onClick","Spaned","text","number","extra_inf","Blackbox","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changehander","setState","state","_this2","onChange","event","src_spaned","days","hours","minutes","seconds","Component","App","src_blackbox","src_buttons","Boolean","window","location","hostname","match","initstate","arguments","length","undefined","action","objectSpread","defineProperty","rootReducer","combineReducers","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74a23131.chunk.js","sourcesContent":["const changeTime = target => {\n  \n  \n  return {\n    type: target.type,\n    payload: target.payload\n  };\n};\n\nexport default changeTime;\n","import React from \"react\";\nimport \"./buttons.css\";\nimport { connect } from \"react-redux\";\nimport changeTime from \"./actions/changeTime\";\nfunction Buttons(props) {\n  function clickhandler(e) {\n    const value = {\n      type: e.target.value,\n      payload: props.type\n    };\n    props.changeTime(value);\n  }\n  return (\n    <div className=\"button-container\">\n      <button value=\"increase\" onClick={e => clickhandler(e)}>\n        Increase\n      </button>\n\n      <button value=\"decrease\" onClick={e => clickhandler(e)}>\n        Decrease\n      </button>\n    </div>\n  );\n}\n\nfunction mapStateToProps({ changeTime }) {\n  return {\n    type:changeTime.type};\n}\n\nexport default connect(\n  mapStateToProps,\n  { changeTime }\n)(Buttons);\n","import React from 'react';\nimport './spaned.css'\nconst Spaned = (props)=>{\n    return(\n        <div className='text-disp'>\n             {props.text.number} \n            <span>\n              {props.text.extra_inf}\n            </span>\n             \n        </div>\n    )\n}\n\nexport default Spaned;","import React, {Component} from \"react\";\nimport './blackbox.css'\nimport Spaned from './spaned.js'\nimport changeTime from './actions/changeTime'\nimport {connect} from 'react-redux'\nclass Blackbox extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n        value:'seconds'\n    }\n  }\n  changehander =(e)=>{\n    \n    const value = {\n      \n      type: 'PROP_TO_CHANGE',\n      payload: e.target.value\n    };\n    \n    this.props.changeTime(value);\n    this.setState({\n        value:e.target.value\n    })\n}\n\n  render() {\n    return (\n      <div className='blackbox-disp'>\n          <div className='header'>\n            Active Session: \n            <select  \n              value={this.state.value}\n              onChange={(event)=>this.changehander(event)} >\n              <option value=\"seconds\">Seconds</option>\n              <option value=\"minutes\">Minutes</option>\n              <option value=\"hours\">Hours</option>\n              <option value=\"days\">Days</option>\n            </select>\n          </div>\n\n          <div className='counter-disp'>\n            <Spaned text ={{number:this.props.days, extra_inf:\"DAYS\"}}/>\n            <Spaned text ={{number:':', extra_inf:\"\"}}/>\n            <Spaned text ={{number:this.props.hours, extra_inf:\"HOURS\"}}/>\n            <Spaned text ={{number:':', extra_inf:\"\"}}/>\n            <Spaned text ={{number:this.props.minutes, extra_inf:\"MINUTES\"}}/>\n            <Spaned text ={{number:':', extra_inf:\"\"}}/>\n            <Spaned text ={{number:this.props.seconds, extra_inf:\"SECONDS\"}}/>\n          </div>\n      </div>\n\n    );\n  }\n}\n\nfunction mapStateToProps({changeTime}){\n  \n\n    return changeTime\n}\n\nexport default connect(mapStateToProps,{changeTime})(Blackbox);\n","import Buttons from \"./buttons\";\nimport Blackbox from \"./blackbox\";\nimport React from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <p> web dev</p>\n        <h1> Learning React</h1>\n        <p>TOTAL TIME SPEND ON THIS PROJECT</p>\n        <Blackbox />\n        <Buttons />\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initstate = {\n  days: 2,\n  hours: 20,\n  minutes: 30,\n  seconds: 3,\n  type: \"seconds\"\n};\n\nconst changeTime = (state = initstate, action) => {\n  switch (action.type) {\n    case \"PROP_TO_CHANGE\":\n      return {\n        ...state,\n        type: action.payload\n      };\n\n    case \"decrease\":\n      if (state[action.payload] > 0) {\n        return {\n          ...state,\n          [action.payload]: state[action.payload] - 1\n        };\n      }\n      return {\n        ...state\n      };\n\n    case \"increase\":\n      return {\n        ...state,\n        [action.payload]: state[action.payload] + 1\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default changeTime;\n","import { combineReducers } from \"../../../../../../Library/Caches/typescript/3.3/node_modules/redux\";\nimport changeTime from './changetime'\n\nconst rootReducer = combineReducers({\n    changeTime,\n    \n})\n\n\nexport default rootReducer","import {createStore} from 'redux'\nimport rootReducer from '../reducer/index'\nconst store= createStore(rootReducer)\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store'\nimport {Provider} from 'react-redux'\n\n\n\nReactDOM.render(<Provider store={store}>  <App/> </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}